import { validate } from "../../utils/validator";
import { useState } from "react";
import { post } from "../../utils/axios";
import { useNavigate } from "react-router-dom";
import { getToken } from "../../utils/token";
import { NotificationManager } from "react-notifications";
import FormControl from "../../componets/form-control";
import Button from "../../componets/button";
import { submithandler } from "../../utils/submithandler";

export function NewVehicle() {
	const [errors, setErrors] = useState({});
	const [isNew, setIsNew] = useState(true);

	const navigate = useNavigate();

	async function createVehicle(data) {
		try {
			let [passes, errors] = validate(data, {
				chassisNumber: "required:min:3",
				manufuctureCompany: "required|string",
				manufucturedYear: "required|string|min:4|max:4",
				price: "required|numeric|min:1",
				modelName: "required|string",
				plateNumber: isNew ? "string" : "required|string",
			});

			data.isNew = isNew;

			if (!passes) {
				setErrors(errors);
				return;
			}

			setErrors({});

			await post("/api/vehicles", data, {
				headers: {
					Authorization: `Bearer ${getToken()}`,
				},
			});

			NotificationManager.success("Created a Vehicle", "Success");

			navigate("/dashboard");
		} catch (error) {
			NotificationManager.error(
				error.response.data.message,
				"Request Rejected"
			);
		}
	}

	return (
		<div className="container">
			<h1 className="t-primary">Create a New Vehicle</h1>
			<div className="mt-5">
				<div className="form-check form-switch">
					<input
						className="form-check-input"
						type="checkbox"
						id="flexSwitchCheckChecked"
						onChange={() => setIsNew(!isNew)}
						checked={isNew}
					/>
					<label
						className="form-check-label"
						htmlFor="flexSwitchCheckChecked"
					>
						Is a new vehicle
					</label>
				</div>
			</div>
			<form onSubmit={submithandler(createVehicle)}>
				<div style={{ maxWidth: 500 }} className="mt-5 mb-5">
					<FormControl
						name="chassisNumber"
						errors={errors.chassisNumber}
						placeholder="Enter the chassis number"
						label="Chassis Number"
					/>
					<FormControl
						name="manufuctureCompany"
						errors={errors.manufuctureCompany}
						placeholder="Enter the manufacture company"
						label="Manufacture Company"
					/>

					<FormControl
						name="manufucturedYear"
						errors={errors.manufucturedYear}
						placeholder="Enter the manufacture year"
						type="number"
						label="Manufacture Year"
					/>

					<FormControl
						name="price"
						errors={errors.price}
						placeholder="Enter the price"
						type="number"
						label="Price"
					/>

					<FormControl
						name="modelName"
						errors={errors.modelName}
						placeholder="Enter the model name"
						label="Model Name"
					/>

					<FormControl
						name="plateNumber"
						errors={errors.plateNumber}
						placeholder={
							isNew
								? "Will be generated by the System"
								: "Enter the plate number"
						}
						label="Plate Number"
						disabled={isNew}
					/>

					<Button title="Create" />
				</div>
			</form>
		</div>
	);
}
